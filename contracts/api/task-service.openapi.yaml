openapi: 3.0.3
info:
  title: Task Service API
  version: 0.1.0
  description: CRUD for tasks and health checks
servers:
  - url: /
paths:
  /health/live:
    get:
      operationId: getLiveness
      summary: Liveness probe
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok
  /health/ready:
    get:
      operationId: getReadiness
      summary: Readiness probe
      responses:
        '200':
          description: Ready
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ready
  /tasks/:
    get:
      operationId: listTasks
      summary: List tasks
      responses:
        '200':
          description: List of tasks
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Task'
    post:
      operationId: createTask
      summary: Create task
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskCreate'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
  /tasks/{task_id}:
    parameters:
      - name: task_id
        in: path
        required: true
        schema:
          type: string
    get:
      operationId: getTask
      summary: Get task by id
      responses:
        '200':
          description: Task
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '404':
          description: Not Found
    patch:
      operationId: updateTask
      summary: Update task
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskUpdate'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '404':
          description: Not Found
    delete:
      operationId: deleteTask
      summary: Delete task
      responses:
        '204':
          description: Deleted
        '404':
          description: Not Found
components:
  schemas:
    TaskStatus:
      type: string
      enum: [todo, in_progress, done]
    Task:
      type: object
      required: [id, title, status, created_at, updated_at]
      properties:
        id:
          type: string
        title:
          type: string
          maxLength: 200
        description:
          type: string
          nullable: true
          maxLength: 2000
        status:
          $ref: '#/components/schemas/TaskStatus'
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    TaskCreate:
      type: object
      required: [title]
      properties:
        title:
          type: string
          maxLength: 200
        description:
          type: string
          nullable: true
          maxLength: 2000
    TaskUpdate:
      type: object
      properties:
        title:
          type: string
          maxLength: 200
        description:
          type: string
          nullable: true
          maxLength: 2000
        status:
          $ref: '#/components/schemas/TaskStatus'
